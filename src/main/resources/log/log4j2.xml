<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置
文件和重新配置本身，设置间隔秒数-->
<Configuration monitorInterval="5">
  <!--日志级别以及优先级排序:
  OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
  <!--变量配置-->
  <Properties>
    <!-- <Property name="LOG_PATTERN_COLOUR">%style{%d{ISO8601}}{bright,blue} %highlight{%-5level} [%style{%t}{bright,blue}] %style{%C{}}{bright,yellow}: %msg%n%style{%throwable}{red}</Property> -->
    <!-- https://developer.aliyun.com/article/1115656  颜色-->
    <Property name="LOG_PATTERN_COLOUR">%style{%d{yyyy-MM-dd HH:mm:ss.SSS}}{Dim,blue} %highlight{%-5level} [%style{%t}{bright,blue}] %style{%l{}}{Underline,magenta}: %style{%msg}{green}%n%style{%throwable}{red}</Property>

    <!-- https://www.cnblogs.com/keeya/p/10101547.html  占位符-->
    <Property name="LOG_PATTERN">%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %l{} - %m%n</Property>
    <!-- 定义日志存储的路径 -->
    <Property name="FILE_PATH">/var/log/simple-watch</Property>
    <!-- 项目名称 -->
    <Property name="FILE_NAME">simple-watch</Property>
  </Properties>
  <Appenders>
    <!--*********************控制台日志***********************-->
    <Console name="Console" target="SYSTEM_OUT">
      <!--输出日志的格式-->
      <PatternLayout pattern="${LOG_PATTERN_COLOUR}" disableAnsi="false" Charset="UTF-8" />
      <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
      <!-- <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"></ThresholdFilter> -->
    </Console>
    <!--*********************不追加文件***********************--> 
    <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--> 
    <File name="Filelog" fileName="${FILE_PATH}/test.log" append="false">
      <PatternLayout pattern="${LOG_PATTERN}" Charset="UTF-8"/>
    </File>

    <!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
    <RollingFile name="RollingFileAll" fileName="${FILE_PATH}/all.log" filePattern="${FILE_PATH}/$${date:yyyy-MM}/${FILE_NAME}-ALL-%d{yyyy-MM-dd}-%i.log.gz">
      <PatternLayout pattern="${LOG_PATTERN}" Charset="UTF-8"/>
      <Policies>
        <!-- 设置日志文件切分参数 -->
        <!--<OnStartupTriggeringPolicy/>-->
        <!--interval属性用来指定多久滚动一次，默认是1 hour-->
            <!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置-->
        <TimeBasedTriggeringPolicy interval="1"/>
        <!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新-->
        <SizeBasedTriggeringPolicy size="50MB"/>
      </Policies>
      <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
      <!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i-->
      <DefaultRolloverStrategy max="15"/>
    </RollingFile>

    <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
    <RollingFile name="RollingFileInfo" fileName="${FILE_PATH}/info.log" filePattern="${FILE_PATH}/$${date:yyyy-MM}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}-%i.log.gz">
      <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
      <!-- <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/> -->
      <Filters>
          <!--过滤掉error及更高级别日志-->
          <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
      </Filters>
      <PatternLayout pattern="${LOG_PATTERN}" Charset="UTF-8"/>
      <Policies>
        <!-- 设置日志文件切分参数 -->
        <!--<OnStartupTriggeringPolicy/>-->
        <!--interval属性用来指定多久滚动一次，默认是1 hour-->
            <!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置-->
        <TimeBasedTriggeringPolicy interval="1"/>
        <!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新-->
        <SizeBasedTriggeringPolicy size="50MB"/>
      </Policies>
      <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
      <!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i-->
      <DefaultRolloverStrategy max="15"/>
    </RollingFile>

    <!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
    <RollingFile name="RollingFileWarn" fileName="${FILE_PATH}/warn.log" filePattern="${FILE_PATH}/$${date:yyyy-MM}/${FILE_NAME}-WARN-%d{yyyy-MM-dd}-%i.log.gz">
      <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
      <Filters>
          <!--过滤掉error及更高级别日志-->
          <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
      </Filters>
      <PatternLayout pattern="${LOG_PATTERN}" Charset="UTF-8"/>
      <Policies>
        <!-- 设置日志文件切分参数 -->
        <!--<OnStartupTriggeringPolicy/>-->
        <!--interval属性用来指定多久滚动一次，默认是1 hour-->
            <!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置-->
        <TimeBasedTriggeringPolicy interval="1"/>
        <!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新-->
        <SizeBasedTriggeringPolicy size="50MB"/>
      </Policies>
      <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
      <!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i-->
      <DefaultRolloverStrategy max="15"/>
    </RollingFile>

    <!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
    <RollingFile name="RollingFileError" fileName="${FILE_PATH}/error.log" filePattern="${FILE_PATH}/$${date:yyyy-MM}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}-%i.log.gz">
      <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
      <PatternLayout pattern="${LOG_PATTERN}" Charset="UTF-8"/>
      <Policies>
        <!-- 设置日志文件切分参数 -->
        <!--<OnStartupTriggeringPolicy/>-->
        <!--interval属性用来指定多久滚动一次，默认是1 hour-->
            <!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置-->
        <TimeBasedTriggeringPolicy interval="1"/>
        <!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新-->
        <SizeBasedTriggeringPolicy size="50MB"/>
      </Policies>
      <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
      <!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i-->
      <DefaultRolloverStrategy max="15"/>
    </RollingFile>

  </Appenders>

  <Loggers>
<!--    若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
<!--     false root 里面的就不会输出了 -->
<!--     <Logger name="com.qin.springtest" additivity="false" level="INFO"> -->
<!--      <AppenderRef ref="Console"></AppenderRef>-->
<!--    </Logger> -->

    <!-- Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出 -->
    <Root level="Info">
      <AppenderRef ref="Console" level="all"/>
      <AppenderRef ref="RollingFileAll" level="all"/>
      <AppenderRef ref="RollingFileInfo" level="info"/>
      <AppenderRef ref="RollingFileWarn" level="warn"/>
      <AppenderRef ref="RollingFileError" level="error"/>
    </Root>
  </Loggers>
</Configuration>